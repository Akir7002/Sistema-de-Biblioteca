package vista;

import modelo.Libro;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class VistaUsuarioExternoSwing extends JFrame implements IVistaUsuarioExterno {
    // Paleta de colores terrosos mejorada para biblioteca (igual que la vista principal)
    private static final Color COLOR_FONDO_PRINCIPAL = new Color(250, 245, 235); // Beige m√°s suave
    private static final Color COLOR_FONDO_SECUNDARIO = new Color(235, 205, 175); // Marr√≥n claro m√°s suave
    private static final Color COLOR_ACENTO = new Color(139, 69, 19); // Marr√≥n chocolate para acentos
    private static final Color COLOR_TEXTO_PRINCIPAL = new Color(62, 39, 35); // Marr√≥n m√°s oscuro para mejor contraste
    private static final Color COLOR_BOTONES = new Color(205, 170, 125); // Marr√≥n dorado m√°s suave
    private static final Color COLOR_BOTONES_HOVER = new Color(180, 140, 90); // Color hover m√°s oscuro
    private static final Color COLOR_BORDES = new Color(160, 120, 90); // Bordes m√°s suaves
    private static final Color COLOR_TABLA_ALTERNANTE = new Color(245, 240, 230); // Para zebra-striping
    
    // Fuentes personalizadas para un aspecto m√°s elegante
    private static final Font FUENTE_TITULO = new Font("Georgia", Font.BOLD, 18);
    private static final Font FUENTE_SUBTITULO = new Font("Georgia", Font.BOLD, 14);
    private static final Font FUENTE_NORMAL = new Font("Segoe UI", Font.PLAIN, 12);
    private static final Font FUENTE_BOTON = new Font("Segoe UI", Font.BOLD, 11);
    
    // Componentes principales
    private JTable tablaCatalogo;
    private DefaultTableModel modeloCatalogo;
    private JTextField txtBusqueda;
    private JComboBox<String> cmbTipoBusqueda;
    private JTextArea txtInformacion;
    private JLabel lblEstadisticas;
    
    // Botones
    private JButton btnBuscar, btnMostrarTodos, btnSoloDisponibles;
    private JButton btnAyuda, btnContacto, btnPopulares;
    
    public VistaUsuarioExternoSwing() {
        inicializarComponentes();
        configurarVentana();
        mostrarBienvenida();
    }
    
    private void inicializarComponentes() {
        // Panel principal
        JPanel panelPrincipal = new JPanel(new BorderLayout());
        
        // Panel superior con t√≠tulo
        JPanel panelTitulo = crearPanelTitulo();
        
        // Panel de b√∫squeda
        JPanel panelBusqueda = crearPanelBusqueda();
        
        // Panel central con cat√°logo
        JPanel panelCatalogo = crearPanelCatalogo();
        
        // Panel lateral con informaci√≥n
        JPanel panelLateral = crearPanelLateral();
        
        // Panel inferior con estad√≠sticas
        JPanel panelInferior = crearPanelInferior();
        
        // Ensamblar layout
        panelPrincipal.add(panelTitulo, BorderLayout.NORTH);
        panelPrincipal.add(panelBusqueda, BorderLayout.NORTH);
        panelPrincipal.add(panelCatalogo, BorderLayout.CENTER);
        panelPrincipal.add(panelLateral, BorderLayout.EAST);
        panelPrincipal.add(panelInferior, BorderLayout.SOUTH);
        
        add(panelPrincipal);
    }
    
    private JPanel crearPanelTitulo() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(new Color(41, 128, 185));
        panel.setBorder(BorderFactory.createEmptyBorder(15, 20, 15, 20));
        
        JLabel titulo = new JLabel("üìñ CAT√ÅLOGO P√öBLICO - BIBLIOTECA", SwingConstants.CENTER);
        titulo.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
        titulo.setForeground(Color.WHITE);
        
        JLabel subtitulo = new JLabel("Explora nuestro cat√°logo de libros disponibles", SwingConstants.CENTER);
        subtitulo.setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 14));
        subtitulo.setForeground(Color.WHITE);
        
        panel.add(titulo, BorderLayout.CENTER);
        panel.add(subtitulo, BorderLayout.SOUTH);
        
        return panel;
    }
    
    private JPanel crearPanelBusqueda() {
        JPanel panel = new JPanel(new FlowLayout());
        panel.setBorder(BorderFactory.createTitledBorder("üîç Buscar en el Cat√°logo"));
        
        panel.add(new JLabel("Buscar:"));
        txtBusqueda = new JTextField(20);
        panel.add(txtBusqueda);
        
        String[] tiposBusqueda = {"Por T√≠tulo", "Por Autor"};
        cmbTipoBusqueda = new JComboBox<>(tiposBusqueda);
        panel.add(cmbTipoBusqueda);
        
        btnBuscar = new JButton("üîç Buscar");
        btnBuscar.setActionCommand("BUSCAR");
        panel.add(btnBuscar);
        
        btnMostrarTodos = new JButton("üìö Ver Todos");
        btnMostrarTodos.setActionCommand("MOSTRAR_TODOS");
        panel.add(btnMostrarTodos);
        
        btnSoloDisponibles = new JButton("‚úÖ Solo Disponibles");
        btnSoloDisponibles.setActionCommand("SOLO_DISPONIBLES");
        panel.add(btnSoloDisponibles);
        
        return panel;
    }
    
    private JPanel crearPanelCatalogo() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createTitledBorder("üìã Cat√°logo de Libros"));
        
        // Crear tabla
        String[] columnas = {"ID", "T√≠tulo", "Autor", "Disponibles", "Total", "Estado"};
        modeloCatalogo = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        tablaCatalogo = new JTable(modeloCatalogo);
        tablaCatalogo.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tablaCatalogo.getTableHeader().setReorderingAllowed(false);
        tablaCatalogo.setRowHeight(25);
        tablaCatalogo.setGridColor(Color.LIGHT_GRAY);
        tablaCatalogo.setShowGrid(true);
        
        // Configurar anchos de columnas
        tablaCatalogo.getColumnModel().getColumn(0).setPreferredWidth(50);
        tablaCatalogo.getColumnModel().getColumn(1).setPreferredWidth(250);
        tablaCatalogo.getColumnModel().getColumn(2).setPreferredWidth(200);
        tablaCatalogo.getColumnModel().getColumn(3).setPreferredWidth(80);
        tablaCatalogo.getColumnModel().getColumn(4).setPreferredWidth(60);
        tablaCatalogo.getColumnModel().getColumn(5).setPreferredWidth(100);
        
        JScrollPane scrollPane = new JScrollPane(tablaCatalogo);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel crearPanelLateral() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setPreferredSize(new Dimension(300, 0));
        panel.setBorder(BorderFactory.createTitledBorder("‚ÑπÔ∏è Informaci√≥n"));
        
        // Panel de botones de informaci√≥n
        JPanel panelBotones = new JPanel(new GridLayout(3, 1, 5, 5));
        panelBotones.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        btnPopulares = new JButton("üî• Libros Populares");
        btnPopulares.setActionCommand("POPULARES");
        btnAyuda = new JButton("‚ùì ¬øC√≥mo pedir prestado?");
        btnAyuda.setActionCommand("AYUDA");
        btnContacto = new JButton("üìû Informaci√≥n de Contacto");
        btnContacto.setActionCommand("CONTACTO");
        
        panelBotones.add(btnPopulares);
        panelBotones.add(btnAyuda);
        panelBotones.add(btnContacto);
        
        // √Årea de texto para mostrar informaci√≥n
        txtInformacion = new JTextArea();
        txtInformacion.setEditable(false);
        txtInformacion.setWrapStyleWord(true);
        txtInformacion.setLineWrap(true);
        txtInformacion.setBackground(new Color(248, 248, 248));
        txtInformacion.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        txtInformacion.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
        
        JScrollPane scrollInfo = new JScrollPane(txtInformacion);
        scrollInfo.setPreferredSize(new Dimension(0, 300));
        
        panel.add(panelBotones, BorderLayout.NORTH);
        panel.add(scrollInfo, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel crearPanelInferior() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createTitledBorder("üìä Estad√≠sticas"));
        panel.setPreferredSize(new Dimension(0, 80));
        
        lblEstadisticas = new JLabel("Cargando estad√≠sticas...", SwingConstants.CENTER);
        lblEstadisticas.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        panel.add(lblEstadisticas, BorderLayout.CENTER);
        
        // Panel de instrucciones
        JPanel panelInstrucciones = new JPanel();
        panelInstrucciones.setBackground(new Color(230, 248, 255));
        JLabel instrucciones = new JLabel("<html><center>üí° <b>Para solicitar un pr√©stamo:</b><br>" +
                                        "Anota el ID del libro y ac√©rcate al mostrador de la biblioteca</center></html>");
        instrucciones.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 11));
        panelInstrucciones.add(instrucciones);
        panel.add(panelInstrucciones, BorderLayout.SOUTH);
        
        return panel;
    }
    
    private void configurarVentana() {
        setTitle("üìñ Cat√°logo P√∫blico - Biblioteca");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1100, 700);
        setLocationRelativeTo(null);
        setMinimumSize(new Dimension(900, 600));
        
        // Aplicar tema terroso de biblioteca
        getContentPane().setBackground(COLOR_FONDO_PRINCIPAL);
        
        // Configurar look and feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            // Continuar con el look and feel por defecto
        }
        
        // Aplicar colores personalizados despu√©s del look and feel
        aplicarColoresPersonalizados();
    }
    
    private void aplicarColoresPersonalizados() {
        // Aplicar colores a todos los componentes
        aplicarColoresRecursivo(this);
    }
    
    private void aplicarColoresRecursivo(Container container) {
        container.setBackground(COLOR_FONDO_PRINCIPAL);
        
        for (Component component : container.getComponents()) {
            if (component instanceof JButton) {
                configurarBotonElegante((JButton) component);
            } else if (component instanceof JLabel) {
                JLabel label = (JLabel) component;
                label.setForeground(COLOR_TEXTO_PRINCIPAL);
                // Aplicar fuentes seg√∫n el contexto
                if (label.getText().contains("üìñ") || label.getText().contains("BIBLIOTECA") ||
                    label.getText().contains("CAT√ÅLOGO")) {
                    label.setFont(FUENTE_TITULO);
                } else if (label.getText().contains(":") && label.getText().length() < 30) {
                    label.setFont(FUENTE_SUBTITULO);
                } else {
                    label.setFont(FUENTE_NORMAL);
                }
            } else if (component instanceof JTextField) {
                JTextField campo = (JTextField) component;
                campo.setBackground(Color.WHITE);
                campo.setForeground(COLOR_TEXTO_PRINCIPAL);
                campo.setFont(FUENTE_NORMAL);
                campo.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(COLOR_BORDES, 1),
                    BorderFactory.createEmptyBorder(5, 8, 5, 8)
                ));
            } else if (component instanceof JComboBox) {
                JComboBox<?> combo = (JComboBox<?>) component;
                combo.setBackground(Color.WHITE);
                combo.setForeground(COLOR_TEXTO_PRINCIPAL);
                combo.setFont(FUENTE_NORMAL);
            } else if (component instanceof JTable) {
                configurarTablaElegante((JTable) component);
            } else if (component instanceof JScrollPane) {
                JScrollPane scroll = (JScrollPane) component;
                scroll.setBackground(COLOR_FONDO_PRINCIPAL);
                scroll.getViewport().setBackground(COLOR_FONDO_PRINCIPAL);
                scroll.setBorder(BorderFactory.createLineBorder(COLOR_BORDES, 1));
            } else if (component instanceof JPanel) {
                JPanel panel = (JPanel) component;
                if (panel.getBorder() != null) {
                    panel.setBackground(COLOR_FONDO_SECUNDARIO);
                    panel.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(COLOR_BORDES, 1),
                        BorderFactory.createEmptyBorder(10, 10, 10, 10)
                    ));
                } else {
                    panel.setBackground(COLOR_FONDO_PRINCIPAL);
                }
                aplicarColoresRecursivo(panel);
            } else if (component instanceof Container) {
                aplicarColoresRecursivo((Container) component);
            }
        }
    }
    
    private void configurarBotonElegante(JButton boton) {
        boton.setBackground(COLOR_BOTONES);
        boton.setForeground(COLOR_TEXTO_PRINCIPAL);
        boton.setFont(FUENTE_BOTON);
        boton.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(COLOR_BORDES, 1),
            BorderFactory.createEmptyBorder(8, 16, 8, 16)
        ));
        boton.setFocusPainted(false);
        boton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        
        // Efectos de hover elegantes
        boton.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                boton.setBackground(COLOR_BOTONES_HOVER);
                boton.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(COLOR_ACENTO, 2),
                    BorderFactory.createEmptyBorder(7, 15, 7, 15)
                ));
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                boton.setBackground(COLOR_BOTONES);
                boton.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(COLOR_BORDES, 1),
                    BorderFactory.createEmptyBorder(8, 16, 8, 16)
                ));
            }
        });
    }
    
    private void configurarTablaElegante(JTable tabla) {
        tabla.setBackground(Color.WHITE);
        tabla.setForeground(COLOR_TEXTO_PRINCIPAL);
        tabla.setFont(FUENTE_NORMAL);
        tabla.setSelectionBackground(COLOR_FONDO_SECUNDARIO);
        tabla.setSelectionForeground(COLOR_TEXTO_PRINCIPAL);
        tabla.setGridColor(COLOR_BORDES);
        tabla.setRowHeight(28); // Un poco m√°s alto para el cat√°logo p√∫blico
        tabla.setShowVerticalLines(true);
        tabla.setShowHorizontalLines(true);
        
        // Configurar el header de la tabla
        if (tabla.getTableHeader() != null) {
            tabla.getTableHeader().setBackground(COLOR_ACENTO);
            tabla.getTableHeader().setForeground(Color.WHITE);
            tabla.getTableHeader().setFont(FUENTE_SUBTITULO);
            tabla.getTableHeader().setBorder(BorderFactory.createLineBorder(COLOR_BORDES, 1));
        }
        
        // Implementar zebra-striping (filas alternantes)
        tabla.setDefaultRenderer(Object.class, new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                
                if (isSelected) {
                    setBackground(COLOR_FONDO_SECUNDARIO);
                    setForeground(COLOR_TEXTO_PRINCIPAL);
                } else if (row % 2 == 0) {
                    setBackground(Color.WHITE);
                    setForeground(COLOR_TEXTO_PRINCIPAL);
                } else {
                    setBackground(COLOR_TABLA_ALTERNANTE);
                    setForeground(COLOR_TEXTO_PRINCIPAL);
                }
                
                setFont(FUENTE_NORMAL);
                setBorder(BorderFactory.createEmptyBorder(6, 8, 6, 8));
                return this;
            }
        });
    }
    
    // M√©todos para conectar con el controlador
    public void setControladorListener(ActionListener listener) {
        btnBuscar.addActionListener(listener);
        btnMostrarTodos.addActionListener(listener);
        btnSoloDisponibles.addActionListener(listener);
        btnPopulares.addActionListener(listener);
        btnAyuda.addActionListener(listener);
        btnContacto.addActionListener(listener);
        
        // Listener para Enter en el campo de b√∫squeda
        @SuppressWarnings("unused")
        ActionListener enterListener = e -> {
            ActionEvent evento = new ActionEvent(btnBuscar, ActionEvent.ACTION_PERFORMED, "BUSCAR");
            listener.actionPerformed(evento);
        };
        txtBusqueda.addActionListener(enterListener);
    }
    
    // Implementaci√≥n de IVistaUsuarioExterno
    @Override
    public void mostrarMenuPublico() {
        setVisible(true);
    }
    
    @Override
    public void mostrarCatalogo(List<Libro> libros) {
        modeloCatalogo.setRowCount(0);
        
        for (Libro libro : libros) {
            String estado = libro.estaDisponible() ? "‚úÖ Disponible" : "‚ùå Agotado";
            Object[] fila = {
                libro.getId(),
                libro.getTitulo(),
                libro.getAutor(),
                libro.getCantidadDisponible(),
                libro.getCantidadTotal(),
                estado
            };
            modeloCatalogo.addRow(fila);
        }
        
        // Actualizar estad√≠sticas en tiempo real
        long disponibles = libros.stream().filter(Libro::estaDisponible).count();
        lblEstadisticas.setText(String.format("üìö Total: %d libros | ‚úÖ Disponibles: %d | ‚ùå Agotados: %d", 
                                            libros.size(), disponibles, libros.size() - disponibles));
    }
    
    @Override
    public void mostrarDetalleLibro(Libro libro) {
        String detalle = String.format("""
            üìñ DETALLE DEL LIBRO
            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            üÜî ID: %d
            üìö T√≠tulo: %s
            üë§ Autor: %s
            üìä Total: %d ejemplares
            ‚úÖ Disponibles: %d
            
            %s
            
            üí° Para solicitar este libro:
            1. Anota el ID: %d
            2. Ac√©rcate al mostrador
            3. Presenta tu documento
            """, 
            libro.getId(), libro.getTitulo(), libro.getAutor(),
            libro.getCantidadTotal(), libro.getCantidadDisponible(),
            libro.estaDisponible() ? "üü¢ DISPONIBLE PARA PR√âSTAMO" : "üî¥ TEMPORALMENTE AGOTADO",
            libro.getId());
            
        txtInformacion.setText(detalle);
        txtInformacion.setCaretPosition(0);
    }
    
    @Override
    public void mostrarResultadoBusqueda(List<Libro> libros, String termino) {
        mostrarCatalogo(libros);
        if (libros.isEmpty()) {
            txtInformacion.setText(String.format("""
                üîç RESULTADO DE B√öSQUEDA
                ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                
                ‚ùå No se encontraron libros con: "%s"
                
                üí° Sugerencias:
                ‚Ä¢ Verifica la ortograf√≠a
                ‚Ä¢ Intenta con palabras m√°s generales
                ‚Ä¢ Busca por autor en lugar de t√≠tulo
                ‚Ä¢ Consulta el cat√°logo completo
                """, termino));
        } else {
            txtInformacion.setText(String.format("""
                üîç RESULTADO DE B√öSQUEDA
                ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                
                ‚úÖ Se encontraron %d resultado(s)
                para: "%s"
                
                üí° Tip: Haz clic en una fila de la tabla
                para ver m√°s detalles del libro.
                """, libros.size(), termino));
        }
        txtInformacion.setCaretPosition(0);
    }
    
    @Override
    public void mostrarMensaje(String mensaje) {
        // Mostrar mensaje en un di√°logo
        JOptionPane.showMessageDialog(this, mensaje, "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
    }
    
    @Override
    public void mostrarBienvenida() {
        txtInformacion.setText("""
            üåü ¬°BIENVENIDO AL CAT√ÅLOGO P√öBLICO! üåü
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            üìñ Explora nuestro cat√°logo de libros
            üîç Busca por t√≠tulo o autor
            ‚úÖ Consulta disponibilidad en tiempo real
            üèõÔ∏è Para pr√©stamos, ac√©rcate al mostrador
            
            üìö CARACTER√çSTICAS:
            ‚Ä¢ M√°s de 1000 t√≠tulos disponibles
            ‚Ä¢ Actualizaci√≥n en tiempo real
            ‚Ä¢ B√∫squeda avanzada
            ‚Ä¢ Informaci√≥n detallada de cada libro
            
            üïê HORARIOS DE ATENCI√ìN:
            ‚Ä¢ Lunes a Viernes: 8:00 AM - 8:00 PM
            ‚Ä¢ S√°bados: 9:00 AM - 5:00 PM
            ‚Ä¢ Domingos: 10:00 AM - 4:00 PM
            
            üí° Usa los botones de la derecha para:
            ‚Ä¢ Ver libros populares
            ‚Ä¢ Obtener ayuda sobre pr√©stamos
            ‚Ä¢ Ver informaci√≥n de contacto
            """);
        txtInformacion.setCaretPosition(0);
    }
    
    @Override
    public void mostrarDespedida() {
        String mensaje = """
            üåü ¬°GRACIAS POR VISITAR NUESTRA BIBLIOTECA! üåü
            
            üìö Esperamos haberte ayudado a encontrar tu pr√≥xima lectura
            üèõÔ∏è Te esperamos pronto para realizar tus pr√©stamos
            
            üìû ¬øDudas? Llama al: (01) 123-4567
            üåê Visita: www.biblioteca.gov.co
            üìß Escr√≠benos: info@biblioteca.gov.co
            """;
        JOptionPane.showMessageDialog(this, mensaje, "¬°Hasta la pr√≥xima!", JOptionPane.INFORMATION_MESSAGE);
        System.exit(0);
    }
    
    @Override
    public int leerOpcion() {
        return 0; // No se usa en GUI
    }
    
    @Override
    public String leerTexto(String prompt) {
        return JOptionPane.showInputDialog(this, prompt);
    }
    
    @Override
    public void pausa() {
        // No aplicable en GUI
    }
    
    // M√©todos espec√≠ficos para obtener datos de la interfaz
    public String getTextoBusqueda() {
        return txtBusqueda.getText().trim();
    }
    
    public String getTipoBusqueda() {
        return (String) cmbTipoBusqueda.getSelectedItem();
    }
    
    public Libro getLibroSeleccionado() {
        int filaSeleccionada = tablaCatalogo.getSelectedRow();
        if (filaSeleccionada >= 0) {
            int id = (Integer) tablaCatalogo.getValueAt(filaSeleccionada, 0);
            String titulo = (String) tablaCatalogo.getValueAt(filaSeleccionada, 1);
            String autor = (String) tablaCatalogo.getValueAt(filaSeleccionada, 2);
            int disponibles = (Integer) tablaCatalogo.getValueAt(filaSeleccionada, 3);
            int total = (Integer) tablaCatalogo.getValueAt(filaSeleccionada, 4);
            
            Libro libro = new Libro(titulo, autor, total);
            libro.setId(id);
            libro.setCantidadDisponible(disponibles);
            return libro;
        }
        return null;
    }
    
    public void mostrarLibrosPopulares() {
        txtInformacion.setText("""
            üî• LOS M√ÅS POPULARES DE ESTE MES
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            ü•á 1. Don Quijote de la Mancha
               üìñ Miguel de Cervantes
               ‚≠ê 45 pr√©stamos este mes
            
            ü•à 2. Cien A√±os de Soledad
               üìñ Gabriel Garc√≠a M√°rquez
               ‚≠ê 38 pr√©stamos este mes
            
            ü•â 3. 1984
               üìñ George Orwell
               ‚≠ê 32 pr√©stamos este mes
            
            4Ô∏è‚É£ El Principito
               üìñ Antoine de Saint-Exup√©ry
               ‚≠ê 28 pr√©stamos este mes
            
            5Ô∏è‚É£ Orgullo y Prejuicio
               üìñ Jane Austen
               ‚≠ê 21 pr√©stamos este mes
            
            üí° ¬øTe interesa alguno? 
            ¬°Cons√∫ltalo en nuestro cat√°logo!
            """);
        txtInformacion.setCaretPosition(0);
    }
    
    public void mostrarAyudaPrestamos() {
        txtInformacion.setText("""
            ‚ùì ¬øC√ìMO SOLICITAR UN PR√âSTAMO?
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            üìù PASOS PARA REALIZAR UN PR√âSTAMO:
            
            1Ô∏è‚É£ CONSULTA EL CAT√ÅLOGO
               ‚Ä¢ Usa este sistema para encontrar libros
               ‚Ä¢ Anota el ID del libro que te interesa
            
            2Ô∏è‚É£ AC√âRCATE AL MOSTRADOR
               ‚Ä¢ Ve al √°rea de pr√©stamos
               ‚Ä¢ Presenta tu documento de identidad
            
            3Ô∏è‚É£ REG√çSTRATE (si es la primera vez)
               ‚Ä¢ Completa el formulario de registro
               ‚Ä¢ Proporciona tus datos de contacto
            
            4Ô∏è‚É£ SOLICITA EL PR√âSTAMO
               ‚Ä¢ Menciona el ID del libro
               ‚Ä¢ El bibliotecario procesar√° tu solicitud
            
            ‚è∞ PLAZOS DE DEVOLUCI√ìN:
            ‚Ä¢ üìö Estudiantes: 15 d√≠as (m√°x. 3 libros)
            ‚Ä¢ üë®‚Äçüè´ Profesores: 30 d√≠as (m√°x. 5 libros)
            ‚Ä¢ üéì Personal: 60 d√≠as (m√°x. 10 libros)
            
            üìû ¬øM√°s dudas? Llama al (01) 123-4567
            """);
        txtInformacion.setCaretPosition(0);
    }
    
    public void mostrarInformacionContacto() {
        txtInformacion.setText("""
            üìû INFORMACI√ìN DE CONTACTO
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            üèõÔ∏è BIBLIOTECA P√öBLICA CENTRAL
            
            üìç DIRECCI√ìN:
               Calle 123 #45-67
               Bogot√° D.C., Colombia
               C√≥digo Postal: 110111
            
            üìû TEL√âFONOS:
               ‚Ä¢ Principal: (01) 123-4567
               ‚Ä¢ Pr√©stamos: (01) 123-4568
               ‚Ä¢ Renovaciones: (01) 123-4569
            
            üåê ONLINE:
               ‚Ä¢ Web: www.biblioteca.gov.co
               ‚Ä¢ Email: info@biblioteca.gov.co
               ‚Ä¢ Redes: @BibliotecaCentral
            
            üöå TRANSPORTE:
               ‚Ä¢ TransMilenio: Estaci√≥n Biblioteca
               ‚Ä¢ Buses: Rutas 15, 23, 45, 67
               ‚Ä¢ Parqueadero gratuito disponible
            
            üïê HORARIOS:
               ‚Ä¢ Lun-Vie: 8:00 AM - 8:00 PM
               ‚Ä¢ S√°bados: 9:00 AM - 5:00 PM
               ‚Ä¢ Domingos: 10:00 AM - 4:00 PM
            """);
        txtInformacion.setCaretPosition(0);
    }
    
    public void mostrarEstadisticasPublicas(int totalLibros, int librosDisponibles, 
                                          int totalUsuarios, int prestamosHoy) {
        lblEstadisticas.setText(String.format(
            "üìä Total: %,d libros | ‚úÖ Disponibles: %,d | üë• Usuarios: %,d | üì§ Pr√©stamos hoy: %d", 
            totalLibros, librosDisponibles, totalUsuarios, prestamosHoy));
            
        // Tambi√©n mostrar informaci√≥n detallada
        txtInformacion.setText(String.format("""
            üìà ESTAD√çSTICAS DE LA BIBLIOTECA
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            üìö COLECCI√ìN:
               ‚Ä¢ Total de libros: %,d
               ‚Ä¢ Disponibles ahora: %,d
               ‚Ä¢ En pr√©stamo: %,d
            
            üë• COMUNIDAD:
               ‚Ä¢ Usuarios registrados: %,d
               ‚Ä¢ Pr√©stamos hoy: %d
            
            üìä PORCENTAJE DE DISPONIBILIDAD:
            %s %.1f%%
            
            üìà TENDENCIAS:
            ‚Ä¢ Libros m√°s solicitados: Ficci√≥n cl√°sica
            ‚Ä¢ Hora pico: 2:00 PM - 4:00 PM
            ‚Ä¢ D√≠a m√°s activo: Martes
            
            üí° Datos actualizados en tiempo real
            """, 
            totalLibros, librosDisponibles, (totalLibros - librosDisponibles),
            totalUsuarios, prestamosHoy,
            generarBarraProgreso(totalLibros > 0 ? ((double) librosDisponibles / totalLibros) * 100 : 0),
            totalLibros > 0 ? ((double) librosDisponibles / totalLibros) * 100 : 0));
        txtInformacion.setCaretPosition(0);
    }
    
    private String generarBarraProgreso(double porcentaje) {
        int barrasCompletas = (int) (porcentaje / 10);
        StringBuilder barra = new StringBuilder("   [");
        
        for (int i = 0; i < 10; i++) {
            if (i < barrasCompletas) {
                barra.append("‚ñà");
            } else {
                barra.append("‚ñë");
            }
        }
        barra.append("]");
        return barra.toString();
    }
}